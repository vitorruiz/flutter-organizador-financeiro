// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/local/model/account_balance_model.dart';
import 'data/local/model/investment_category_model.dart';
import 'data/local/model/investment_model.dart';
import 'data/local/model/investment_wallet_model.dart';
import 'data/local/model/investment_wallet_option_model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(1, 8655493933260001259),
      name: 'AccountBalanceModel',
      lastPropertyId: const obx_int.IdUid(4, 7802499258600519140),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 3643973412398762034),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3244349508305086520),
            name: 'balance',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7802499258600519140),
            name: 'id',
            type: 6,
            flags: 1)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 5766444206923592438),
      name: 'InvestmentCategoryModel',
      lastPropertyId: const obx_int.IdUid(3, 5076139357253437080),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 7697373102988239756),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5076139357253437080),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(3, 1587952917490308533),
      name: 'InvestmentModel',
      lastPropertyId: const obx_int.IdUid(7, 5888586994069415328),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 2133601920266520084),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 3810698788236716327),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7926085827161714460),
            name: 'price',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 8404021483014432959),
            name: 'averagePrice',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 3224617259458797731),
            name: 'quantity',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(4, 7953772479442935243),
      name: 'InvestmentWalletModel',
      lastPropertyId: const obx_int.IdUid(3, 7643682603198371249),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 3465572225896881662),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 8716950187098648659),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7643682603198371249),
            name: 'valueToInvest',
            type: 8,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[
        obx_int.ModelRelation(
            id: const obx_int.IdUid(2, 6121365213889748956),
            name: 'options',
            targetId: const obx_int.IdUid(5, 7123946359697207595))
      ],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(5, 7123946359697207595),
      name: 'InvestmentWalletOptionModel',
      lastPropertyId: const obx_int.IdUid(6, 1195789990701029307),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 60847730416863526),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 816031418111588446),
            name: 'name',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 7175800870949121459),
            name: 'walletPercentage',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 7011298192505932273),
            name: 'value',
            type: 8,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 6753862340196896543),
            name: 'walletId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 4529310669691677455),
            relationTarget: 'InvestmentWalletModel'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 1195789990701029307),
            name: 'investmentId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(6, 1189838701976693809),
            relationTarget: 'InvestmentModel')
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(5, 7123946359697207595),
      lastIndexId: const obx_int.IdUid(6, 1189838701976693809),
      lastRelationId: const obx_int.IdUid(2, 6121365213889748956),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        6061803532507860921,
        5578348073718933208,
        7526836149251142061,
        7556552766392451763
      ],
      retiredPropertyUids: const [
        5442701740373731167,
        7001073841103006385,
        8010071139626763740,
        5888586994069415328
      ],
      retiredRelationUids: const [4767612180573789599],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    AccountBalanceModel: obx_int.EntityDefinition<AccountBalanceModel>(
        model: _entities[0],
        toOneRelations: (AccountBalanceModel object) => [],
        toManyRelations: (AccountBalanceModel object) => {},
        getId: (AccountBalanceModel object) => object.id,
        setId: (AccountBalanceModel object, int id) {
          object.id = id;
        },
        objectToFB: (AccountBalanceModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(5);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.balance);
          fbb.addInt64(3, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final balanceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = AccountBalanceModel(
              id: idParam, name: nameParam, balance: balanceParam);

          return object;
        }),
    InvestmentCategoryModel: obx_int.EntityDefinition<InvestmentCategoryModel>(
        model: _entities[1],
        toOneRelations: (InvestmentCategoryModel object) => [],
        toManyRelations: (InvestmentCategoryModel object) => {},
        getId: (InvestmentCategoryModel object) => object.id,
        setId: (InvestmentCategoryModel object, int id) {
          object.id = id;
        },
        objectToFB: (InvestmentCategoryModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final object = InvestmentCategoryModel(id: idParam, name: nameParam);

          return object;
        }),
    InvestmentModel: obx_int.EntityDefinition<InvestmentModel>(
        model: _entities[2],
        toOneRelations: (InvestmentModel object) => [],
        toManyRelations: (InvestmentModel object) => {},
        getId: (InvestmentModel object) => object.id,
        setId: (InvestmentModel object, int id) {
          object.id = id;
        },
        objectToFB: (InvestmentModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(8);
          fbb.addInt64(1, object.id);
          fbb.addOffset(2, nameOffset);
          fbb.addFloat64(3, object.price);
          fbb.addFloat64(4, object.averagePrice);
          fbb.addFloat64(5, object.quantity);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 8, '');
          final priceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
          final averagePriceParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0);
          final quantityParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 14, 0);
          final object = InvestmentModel(
              id: idParam,
              name: nameParam,
              price: priceParam,
              averagePrice: averagePriceParam,
              quantity: quantityParam);

          return object;
        }),
    InvestmentWalletModel: obx_int.EntityDefinition<InvestmentWalletModel>(
        model: _entities[3],
        toOneRelations: (InvestmentWalletModel object) => [],
        toManyRelations: (InvestmentWalletModel object) => {
              obx_int.RelInfo<InvestmentWalletModel>.toMany(2, object.id):
                  object.options
            },
        getId: (InvestmentWalletModel object) => object.id,
        setId: (InvestmentWalletModel object, int id) {
          object.id = id;
        },
        objectToFB: (InvestmentWalletModel object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.addFloat64(2, object.valueToInvest);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final valueToInvestParam =
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
          final object = InvestmentWalletModel(
              id: idParam, name: nameParam, valueToInvest: valueToInvestParam);
          obx_int.InternalToManyAccess.setRelInfo<InvestmentWalletModel>(
              object.options,
              store,
              obx_int.RelInfo<InvestmentWalletModel>.toMany(2, object.id));
          return object;
        }),
    InvestmentWalletOptionModel:
        obx_int.EntityDefinition<InvestmentWalletOptionModel>(
            model: _entities[4],
            toOneRelations: (InvestmentWalletOptionModel object) =>
                [object.wallet, object.investment],
            toManyRelations: (InvestmentWalletOptionModel object) => {},
            getId: (InvestmentWalletOptionModel object) => object.id,
            setId: (InvestmentWalletOptionModel object, int id) {
              object.id = id;
            },
            objectToFB: (InvestmentWalletOptionModel object, fb.Builder fbb) {
              final nameOffset = fbb.writeString(object.name);
              fbb.startTable(7);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, nameOffset);
              fbb.addFloat64(2, object.walletPercentage);
              fbb.addFloat64(3, object.value);
              fbb.addInt64(4, object.wallet.targetId);
              fbb.addInt64(5, object.investment.targetId);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (obx.Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);
              final idParam =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
              final nameParam = const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, '');
              final walletPercentageParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0);
              final valueParam =
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 10, 0);
              final object = InvestmentWalletOptionModel(
                  id: idParam,
                  name: nameParam,
                  walletPercentage: walletPercentageParam,
                  value: valueParam);
              object.wallet.targetId =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
              object.wallet.attach(store);
              object.investment.targetId =
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0);
              object.investment.attach(store);
              return object;
            })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [AccountBalanceModel] entity fields to define ObjectBox queries.
class AccountBalanceModel_ {
  /// See [AccountBalanceModel.name].
  static final name =
      obx.QueryStringProperty<AccountBalanceModel>(_entities[0].properties[0]);

  /// See [AccountBalanceModel.balance].
  static final balance =
      obx.QueryDoubleProperty<AccountBalanceModel>(_entities[0].properties[1]);

  /// See [AccountBalanceModel.id].
  static final id =
      obx.QueryIntegerProperty<AccountBalanceModel>(_entities[0].properties[2]);
}

/// [InvestmentCategoryModel] entity fields to define ObjectBox queries.
class InvestmentCategoryModel_ {
  /// See [InvestmentCategoryModel.id].
  static final id = obx.QueryIntegerProperty<InvestmentCategoryModel>(
      _entities[1].properties[0]);

  /// See [InvestmentCategoryModel.name].
  static final name = obx.QueryStringProperty<InvestmentCategoryModel>(
      _entities[1].properties[1]);
}

/// [InvestmentModel] entity fields to define ObjectBox queries.
class InvestmentModel_ {
  /// See [InvestmentModel.id].
  static final id =
      obx.QueryIntegerProperty<InvestmentModel>(_entities[2].properties[0]);

  /// See [InvestmentModel.name].
  static final name =
      obx.QueryStringProperty<InvestmentModel>(_entities[2].properties[1]);

  /// See [InvestmentModel.price].
  static final price =
      obx.QueryDoubleProperty<InvestmentModel>(_entities[2].properties[2]);

  /// See [InvestmentModel.averagePrice].
  static final averagePrice =
      obx.QueryDoubleProperty<InvestmentModel>(_entities[2].properties[3]);

  /// See [InvestmentModel.quantity].
  static final quantity =
      obx.QueryDoubleProperty<InvestmentModel>(_entities[2].properties[4]);
}

/// [InvestmentWalletModel] entity fields to define ObjectBox queries.
class InvestmentWalletModel_ {
  /// See [InvestmentWalletModel.id].
  static final id = obx.QueryIntegerProperty<InvestmentWalletModel>(
      _entities[3].properties[0]);

  /// See [InvestmentWalletModel.name].
  static final name = obx.QueryStringProperty<InvestmentWalletModel>(
      _entities[3].properties[1]);

  /// See [InvestmentWalletModel.valueToInvest].
  static final valueToInvest = obx.QueryDoubleProperty<InvestmentWalletModel>(
      _entities[3].properties[2]);

  /// see [InvestmentWalletModel.options]
  static final options = obx.QueryRelationToMany<InvestmentWalletModel,
      InvestmentWalletOptionModel>(_entities[3].relations[0]);
}

/// [InvestmentWalletOptionModel] entity fields to define ObjectBox queries.
class InvestmentWalletOptionModel_ {
  /// See [InvestmentWalletOptionModel.id].
  static final id = obx.QueryIntegerProperty<InvestmentWalletOptionModel>(
      _entities[4].properties[0]);

  /// See [InvestmentWalletOptionModel.name].
  static final name = obx.QueryStringProperty<InvestmentWalletOptionModel>(
      _entities[4].properties[1]);

  /// See [InvestmentWalletOptionModel.walletPercentage].
  static final walletPercentage =
      obx.QueryDoubleProperty<InvestmentWalletOptionModel>(
          _entities[4].properties[2]);

  /// See [InvestmentWalletOptionModel.value].
  static final value = obx.QueryDoubleProperty<InvestmentWalletOptionModel>(
      _entities[4].properties[3]);

  /// See [InvestmentWalletOptionModel.wallet].
  static final wallet = obx.QueryRelationToOne<InvestmentWalletOptionModel,
      InvestmentWalletModel>(_entities[4].properties[4]);

  /// See [InvestmentWalletOptionModel.investment].
  static final investment =
      obx.QueryRelationToOne<InvestmentWalletOptionModel, InvestmentModel>(
          _entities[4].properties[5]);
}
